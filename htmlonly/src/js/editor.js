// Generated by CoffeeScript 1.3.1
(function() {
  var Docstrap, Editor, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Editor = (function() {

    Editor.name = 'Editor';

    function Editor(selector) {
      this.selector = selector;
    }

    Editor.prototype.justifyLeft = function() {
      return document.execCommand('justifyLeft', false, "");
    };

    Editor.prototype.justifyCenter = function() {
      return document.execCommand('justifyCenter', false, "");
    };

    Editor.prototype.justifyRight = function() {
      return document.execCommand('justifyRight', false, "");
    };

    Editor.prototype.bold = function() {
      return document.execCommand('bold', false, "");
    };

    Editor.prototype.italic = function() {
      return document.execCommand('italic', false, "");
    };

    Editor.prototype.underline = function() {
      return document.execCommand('underline', false, "");
    };

    Editor.prototype.strikeThrough = function() {
      return document.execCommand('strikeThrough', false, "");
    };

    Editor.prototype.subscript = function() {
      return document.execCommand('subscript', false, "");
    };

    Editor.prototype.superscript = function() {
      return document.execCommand('superscript', false, "");
    };

    Editor.prototype.removeFormat = function() {
      return document.execCommand('removeFormat', false, "");
    };

    Editor.prototype.indent = function() {
      return document.execCommand('indent', false, "");
    };

    Editor.prototype.outdent = function() {
      return document.execCommand('outdent', false, "");
    };

    Editor.prototype.insertOrderedList = function() {
      return document.execCommand('insertOrderedList', false, "");
    };

    Editor.prototype.insertUnorderedList = function() {
      return document.execCommand('insertUnorderedList', false, "");
    };

    Editor.prototype.showSource = function() {
      return window.alert($(this.selector).html());
    };

    Editor.prototype.toggleMarkup = function() {
      var el;
      el = $(this.selector);
      if (el.hasClass("showMarkup")) {
        return el.removeClass("showMarkup");
      } else {
        return el.addClass("showMarkup");
      }
    };

    Editor.prototype.formatBlock = function(blockEl) {
      return document.execCommand('formatBlock', false, blockEl);
    };

    Editor.prototype.insertHTML = function(html) {
      return document.execCommand('insertHTML', true, html);
    };

    Editor.prototype.insertMyTemplate = function(el) {
      var html, v;
      html = $(el).find(".template").html().toString().trim();
      console.log(html);
      v = document.execCommand('insertHTML', false, html);
      return console.log(v);
    };

    Editor.prototype.pasteHtmlAtCaret = function(html) {
      var el, frag, lastNode, node, range, sel;
      if (window.getSelection) {
        sel = window.getSelection();
        if (sel.getRangeAt && sel.rangeCount) {
          range = sel.getRangeAt(0);
          range.deleteContents();
          el = document.createElement("div");
          el.innerHTML = html;
          frag = document.createDocumentFragment();
          while ((node = el.firstChild)) {
            lastNode = frag.appendChild(node);
          }
          range.insertNode(frag);
          if (lastNode) {
            range = range.cloneRange();
            range.setStartAfter(lastNode);
            range.collapse(true);
            sel.removeAllRanges();
            return sel.addRange(range);
          }
        }
      } else if (document.selection && document.selection.type !== "Control") {
        return document.selection.createRange().pasteHTML(html);
      }
    };

    return Editor;

  })();

  Docstrap = {
    Editor: Editor
  };

  root.Docstrap = Docstrap;

}).call(this);
